2.1-1

insertion sorting
[31, 41, 59, 26, 41, 58]
[31] | [41, 59, 26, 41, 58]
[31, 41] | [59, 26, 41, 58]
[31, 41, 59] | [26, 41, 58]
59 -->
26 <--
41 -->
26 <--
31 -->
26 <--
[26, 31, 41, 59] | [41, 58]
59 -->
41 <--
[26, 31, 41, 41, 59] | [58]
59 -->
58 <--
[26, 31, 41, 41, 58, 59]


2.1-4

At the start of each iteration of the for loop of lines 3 through 15, the array of
sum consists of the binary position of the current byte

binaryAdd(array1, array2)
    //we are going to assume 2 arrays of n length
    sum = new array[array1.length+1]
    carryOver = 0
    for j = 1 to array1.length
        currentDigit = carryOver + array1[j] + array2[j]
        if currentDigit == 3
            sum[j] = 1
            carryOver = 1
        else if currentDigit == 2
            sum[j] = 0
            carryOver = 1
        else if currentDigit == 1
            sum[j] = 1
            carryOver = 0
        else
            sum[j] = 0
            carryOver = 0
    //set the last digit equal to the carryOver
    sum[sum.length] = carryOver

2.2-3

Linear searches go through a list each element at a time, so the average case scenario
would be to go through half of all the elements (n/2) to find your value if the element is
equally likely to be in any spot, the worst case is going through every element, so (n)
since the coefficient is not usally important in big O notation the search would have a
running time of O(n)

10.1-1
PUSH(S,4)
array =  [4, None, None, None, None, None]
top =  1
stack =  [4]

PUSH(S,1)
array =  [4, 1, None, None, None, None]
top =  2
stack =  [4, 1]

PUSH(S,3)
array =  [4, 1, 3, None, None, None]
top =  3
stack =  [4, 1, 3]

POP(S)
array =  [4, 1, 3, None, None, None]
top =  2
stack =  [4, 1]

PUSH(S,8)
array =  [4, 1, 8, None, None, None]
top =  3
stack =  [4, 1, 8]

POP(S)
array =  [4, 1, 8, None, None, None]
top =  2
stack =  [4, 1]

10.1-5
